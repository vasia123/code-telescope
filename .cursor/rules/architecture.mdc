---
description: 
globs: 
alwaysApply: true
---
# Общее описание

"Code Telescope" — инструмент на языке Go для генерации высокоуровневых карт кода проектов с использованием ЛЛМ. Инструмент анализирует исходные файлы проекта, извлекает их структуру (импорты, экспорты, публичные методы) и генерирует Markdown-документацию, представляющую каждый файл как "черный ящик" с описанием его интерфейсов.


# Архитектура системы генерации карты кода с использованием ЛЛМ

## Высокоуровневый обзор

Ваш проект представляет собой инструмент, который анализирует кодовую базу, извлекает структурную информацию и, используя большую языковую модель (ЛЛМ), генерирует наглядную карту кода в формате Markdown. Эта карта представляет каждый файл проекта как "черный ящик" с его интерфейсами (импорты/экспорты) и публичными методами, включая их параметры и высокоуровневые описания.

## Модульная структура

### 1. Модуль файловой системы (FileSystemModule)
**Ответственность**: Сканирование директорий проекта и сбор метаданных о файлах кода.

### 2. Модуль парсинга кода (CodeParserModule)
**Ответственность**: Анализ различных типов файлов кода для извлечения структурной информации.

### 3. Модуль взаимодействия с ЛЛМ (LLMInterfaceModule)
**Ответственность**: Взаимодействие с ЛЛМ для генерации высокоуровневых описаний.

### 4. Модуль генерации Markdown (MarkdownGeneratorModule)
**Ответственность**: Преобразование собранной информации в структурированный Markdown-документ.

### 5. Модуль конфигурации (ConfigurationModule)
**Ответственность**: Управление пользовательскими настройками и параметрами процесса.

### 6. Оркестратор (OrchestratorModule)
**Ответственность**: Координация всего процесса и обработка ошибок.

## Взаимодействие между модулями

```
flowchart TB
    User([Пользователь]) <--> Orchestrator
    
    subgraph System["Система генерации карты кода"]
        Orchestrator(Оркестратор) --> FileSystem
        FileSystem(Модуль файловой\nсистемы) --> CodeParser
        
        Orchestrator --> Config
        Config(Модуль\nконфигурации) --> FileSystem
        Config --> CodeParser
        Config --> LLMInterface
        Config --> MarkdownGenerator
        
        CodeParser(Модуль парсинга\nкода) --> LLMInterface
        LLMInterface(Модуль\nвзаимодействия с ЛЛМ) --> MarkdownGenerator
        MarkdownGenerator(Модуль генерации\nMarkdown) --> Orchestrator
    end
    
    LLMInterface <--> LLM[(ЛЛМ\nСервис)]
```

## Детальное описание модулей

### 1. Модуль файловой системы (FileSystemModule)

**Публичные методы**:
- `scanProject(projectPath, config) -> Array<FileMetadata>`
  - **Вход**: Путь к директории проекта, объект конфигурации
  - **Выход**: Массив метаданных файлов
  - **Описание**: Сканирует директорию проекта и возвращает метаданные всех релевантных файлов кода

### 2. Модуль парсинга кода (CodeParserModule)

**Публичные методы**:
- `parseFile(fileMetadata, config) -> FileStructure`
  - **Вход**: Метаданные файла, объект конфигурации
  - **Выход**: Структурированное представление содержимого файла
  - **Описание**: Анализирует файл и извлекает его структуру: импорты, экспорты и методы
- `getParser(fileExtension) -> Parser`
  - **Вход**: Расширение файла
  - **Выход**: Соответствующий парсер для типа файла
  - **Описание**: Фабричный метод для получения подходящего парсера языка

### 3. Модуль взаимодействия с ЛЛМ (LLMInterfaceModule)

**Публичные методы**:
- `generateMethodDescription(methodInfo, fileContext, config) -> String`
  - **Вход**: Информация о методе, контекст файла, объект конфигурации
  - **Выход**: Высокоуровневое описание метода
  - **Описание**: Отправляет сигнатуру метода и контекст в ЛЛМ и возвращает сгенерированное описание
- `batchGenerateDescriptions(methods, fileContext, config) -> Map<String, String>`
  - **Вход**: Список методов, контекст файла, объект конфигурации
  - **Выход**: Словарь, сопоставляющий идентификаторы методов с их описаниями
  - **Описание**: Обрабатывает несколько методов пакетом для оптимизации использования API ЛЛМ

### 4. Модуль генерации Markdown (MarkdownGeneratorModule)

**Публичные методы**:
- `generateFileSection(fileStructure, config) -> String`
  - **Вход**: Объект структуры файла, объект конфигурации
  - **Выход**: Markdown-строка для одного файла
  - **Описание**: Генерирует markdown-представление файла с его структурой
- `generateCodeMap(fileStructures, config) -> String`
  - **Вход**: Список структур файлов, объект конфигурации
  - **Выход**: Полная markdown-строка для карты кода
  - **Описание**: Генерирует полный markdown-документ карты кода

### 5. Модуль конфигурации (ConfigurationModule)

**Публичные методы**:
- `loadConfig(configPath = null) -> Config`
  - **Вход**: Опциональный путь к файлу конфигурации
  - **Выход**: Объект конфигурации
  - **Описание**: Загружает конфигурацию из файла или использует значения по умолчанию
- `validateConfig(config) -> Boolean`
  - **Вход**: Объект конфигурации
  - **Выход**: Булево значение, указывающее, валидна ли конфигурация
  - **Описание**: Проверяет настройки конфигурации

### 6. Оркестратор (OrchestratorModule)

**Публичные методы**:
- `generateCodeMap(projectPath, configPath = null) -> String`
  - **Вход**: Путь к директории проекта, опциональный путь к файлу конфигурации
  - **Выход**: Сгенерированная markdown-карта кода
  - **Описание**: Координирует весь процесс генерации карты кода
- `saveCodeMap(codeMap, outputPath) -> Boolean`
  - **Вход**: Сгенерированная строка карты кода, путь к выходному файлу
  - **Выход**: Булево значение, указывающее на успех
  - **Описание**: Сохраняет сгенерированную карту кода в указанный файл

## Технологический стек

1. **Основной язык**: Golang

2. **Парсинг кода**:
   - TreeSitter

3. **ЛЛМ-сервис**:
   - OpenAI API (GPT-4)
   - Anthropic API (Claude)
   - Другие провайдеры ЛЛМ на основе апи OpenAI

4. **Генерация Markdown**:
   - Собственная реализация с использованием шаблонов
   - Библиотеки форматирования Markdown

## Подход к управлению данными

1. **Входные данные**: Файлы проекта (различные языки программирования)
2. **Промежуточные данные**:
   - Метаданные структуры файлов
   - Парсированная структура кода (методы, импорты, экспорты)
   - Сгенерированные ЛЛМ описания
3. **Выходные данные**: Markdown-файл со структурированной картой кода

## Механизмы расширения и масштабирования

1. **Поддержка языков**: Модульный дизайн для легкого добавления парсеров для новых языков программирования
2. **Гибкость ЛЛМ-провайдеров**: Абстрактный интерфейс ЛЛМ для возможности переключения между разными провайдерами
3. **Опции формата вывода**: Возможность расширения для генерации разных форматов (HTML, SVG-диаграммы и т.д.)
4. **Оптимизация производительности**: Пакетная обработка для больших кодовых баз
5. **Возможности интеграции**: CLI-инструмент, расширение VS Code или веб-сервис

## Пример выходного формата

```
# Карта кода проекта "CodeMapper"

## src/orchestrator.js

### Импорты/Экспорты
```
Импорты:
- FileSystemModule из './fileSystem'
- CodeParserModule из './codeParser'
- LLMInterfaceModule из './llmInterface'
- MarkdownGeneratorModule из './markdownGenerator'
- ConfigurationModule из './configuration'

Экспорты:
- OrchestratorModule (default)
```

### Публичные методы

#### generateCodeMap(projectPath, configPath = null) -> String
- **Входные параметры**: 
  - projectPath: String - путь к директории проекта
  - configPath: String (опционально) - путь к конфигурационному файлу
- **Выходные параметры**: 
  - String - сгенерированная markdown-карта кода
- **Описание**: Координирует весь процесс генерации карты кода, включая сканирование файлов, их парсинг, взаимодействие с ЛЛМ и генерацию финального markdown-документа.

#### saveCodeMap(codeMap, outputPath) -> Boolean
- **Входные параметры**: 
  - codeMap: String - сгенерированная карта кода
  - outputPath: String - путь для сохранения выходного файла
- **Выходные параметры**: 
  - Boolean - результат операции (успех/неудача)
- **Описание**: Сохраняет сгенерированную карту кода в файл по указанному пути с проверкой корректности записи.

## src/fileSystem.js

### Импорты/Экспорты
```
Импорты:
- fs из 'fs/promises'
- path из 'path'

Экспорты:
- FileSystemModule (default)
```

### Публичные методы

#### scanProject(projectPath, config) -> Array<FileMetadata>
- **Входные параметры**: 
  - projectPath: String - путь к директории проекта
  - config: Object - объект конфигурации
- **Выходные параметры**: 
  - Array<FileMetadata> - массив метаданных о файлах
- **Описание**: Рекурсивно сканирует директорию проекта, фильтрует файлы согласно конфигурации и возвращает метаданные релевантных файлов кода.
```

## Структура проекта

```
/cmd
  /codetelescope
    main.go              // Точка входа в приложение
/internal
  /filesystem            // Модуль работы с файловой системой
    filesystem.go        // Основной файл модуля
    types.go             // Определения типов
  /parser                // Модуль парсинга кода с Tree-sitter
    parser.go            // Интерфейс парсера и общая логика
    language_factory.go  // Фабрика для создания парсеров разных языков
    /languages           // Парсеры для конкретных языков
      go.go
      javascript.go
      python.go
      ...
  /llm                   // Модуль взаимодействия с ЛЛМ
    llm.go               // Интерфейс ЛЛМ
    openai.go            // Реализация для OpenAI
    anthropic.go         // Реализация для Anthropic
    prompt_builder.go    // Конструктор промптов для ЛЛМ
  /markdown              // Модуль генерации Markdown
    markdown.go          // Генерация Markdown
    templates.go         // Шаблоны для генерации
  /config                // Модуль конфигурации
    config.go            // Работа с конфигурацией
    defaults.go          // Значения по умолчанию
  /orchestrator          // Оркестратор процесса
    orchestrator.go      // Координация всего процесса
    error_handler.go     // Обработка ошибок
/pkg                     // Публичные пакеты
  /models                // Определения структур данных
    file_metadata.go
    code_structure.go
    method_info.go
  /utils                 // Утилиты
    logger.go
    helpers.go
/configs                 // Конфигурационные файлы
  default.yaml           // Конфигурация по умолчанию
/examples                // Примеры использования
  simple_project/        // Пример простого проекта
  output_example.md      // Пример вывода
/docs                    // Документация
  usage.md               // Руководство пользователя
  development.md         // Руководство разработчика
/scripts                 // Вспомогательные скрипты
  install_treesitter.sh  // Скрипт установки Tree-sitter
/go.mod                  // Файл зависимостей Go
/go.sum                  // Контрольные суммы зависимостей
/Makefile                // Файл сборки
/README.md               // Описание проекта

```